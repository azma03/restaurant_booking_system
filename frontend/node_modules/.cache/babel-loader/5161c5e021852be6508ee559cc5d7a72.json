{"ast":null,"code":"import _classCallCheck from \"/Users/user/Documents/codeclan_work/week_15/java_project/spring_react_app/restaurant/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/user/Documents/codeclan_work/week_15/java_project/spring_react_app/restaurant/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/user/Documents/codeclan_work/week_15/java_project/spring_react_app/restaurant/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/user/Documents/codeclan_work/week_15/java_project/spring_react_app/restaurant/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/user/Documents/codeclan_work/week_15/java_project/spring_react_app/restaurant/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/user/Documents/codeclan_work/week_15/java_project/spring_react_app/restaurant/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/user/Documents/codeclan_work/week_15/java_project/spring_react_app/restaurant/frontend/src/containers/BookingContainer.js\";\nimport React from 'react';\nimport BookingList from '../components/Bookings/BookingList';\nimport BookingDateSelector from '../components/Bookings/BookingDateSelector';\nimport Request from '../helpers/request.js';\nimport BookingForm from '../components/Bookings/BookingForm';\n\nvar BookingContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(BookingContainer, _React$Component);\n\n  function BookingContainer(props) {\n    var _this;\n\n    _classCallCheck(this, BookingContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BookingContainer).call(this, props));\n    _this.state = {\n      currentDate: null,\n      data: [],\n      customerData: [],\n      tableData: [],\n      updatedTableData: []\n    };\n    _this.handleDateSelected = _this.handleDateSelected.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleFormSubmit = _this.handleFormSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updateTableDataByCapacity = _this.updateTableDataByCapacity.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(BookingContainer, [{\n    key: \"handleDateSelected\",\n    value: function handleDateSelected(selectedDate) {\n      this.setState({\n        currentDate: selectedDate\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var request2 = new Request();\n      request2.get('/api/bookings').then(function (bookingData) {\n        _this2.setState({\n          data: bookingData._embedded.bookings\n        });\n      });\n      var request = new Request();\n      request.get('/api/customers').then(function (data1) {\n        _this2.setState({\n          customerData: data1._embedded.customers\n        });\n      });\n      var request3 = new Request();\n      request3.get('/api/booths').then(function (data2) {\n        _this2.setState({\n          tableData: data2._embedded.booths\n        });\n      });\n    }\n  }, {\n    key: \"handleFormSubmit\",\n    value: function handleFormSubmit(booking) {\n      debugger;\n      var request = new Request();\n      request.post('/api/bookings', booking).then(function () {\n        window.location = '/api/bookings';\n      });\n    }\n  }, {\n    key: \"checkTableAvailability\",\n    value: function checkTableAvailability() {}\n  }, {\n    key: \"updateTableDataByCapacity\",\n    value: function updateTableDataByCapacity(partySize) {\n      console.log(\"from updateTableData\"); // debugger;\n\n      var tables = this.state.tableData;\n\n      for (var i = tables.length - 1; i >= 0; i--) {\n        console.log(\"current table\" + tables[i]);\n\n        if (tables[i].capacity < partySize) {\n          console.log(tables[i]); //remove table from tables array\n\n          tables.splice(i, 1);\n        }\n\n        console.log(\"tables after loop iteration\" + tables);\n      }\n\n      this.setState({\n        updatedTableData: tables\n      });\n    }\n  }, {\n    key: \"updateTableDataByTime\",\n    value: function updateTableDataByTime(bookingTime) {\n      console.log(\"from updateTableData\"); // debugger;\n\n      var tables = this.state.tableData;\n\n      for (var i = tables.length - 1; i >= 0; i--) {\n        console.log(\"current table\" + tables[i]);\n\n        if (tables[i].capacity < partySize) {\n          console.log(tables[i]); //remove table from tables array\n\n          tables.splice(i, 1);\n        }\n\n        console.log(\"tables after loop iteration\" + tables);\n      }\n\n      this.setState({\n        updatedTableData: tables\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(React.Fragment, null, React.createElement(BookingDateSelector, {\n        bookings: this.state.data,\n        onDateSelected: this.handleDateSelected,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }), React.createElement(BookingList, {\n        data: this.state.data,\n        filterDate: this.state.currentDate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }), React.createElement(BookingForm, {\n        onFormSubmit: this.handleFormSubmit,\n        customerData: this.state.customerData,\n        tableData: this.state.updatedTableData,\n        onPartySizeInput: this.updateTableDataByCapacity,\n        onBookingTimeInput: this.updateTableDataByTime,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return BookingContainer;\n}(React.Component);\n\n;\nexport default BookingContainer;","map":{"version":3,"sources":["/Users/user/Documents/codeclan_work/week_15/java_project/spring_react_app/restaurant/frontend/src/containers/BookingContainer.js"],"names":["React","BookingList","BookingDateSelector","Request","BookingForm","BookingContainer","props","state","currentDate","data","customerData","tableData","updatedTableData","handleDateSelected","bind","handleFormSubmit","updateTableDataByCapacity","selectedDate","setState","request2","get","then","bookingData","_embedded","bookings","request","data1","customers","request3","data2","booths","booking","post","window","location","partySize","console","log","tables","i","length","capacity","splice","bookingTime","updateTableDataByTime","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport BookingList from '../components/Bookings/BookingList';\nimport BookingDateSelector from '../components/Bookings/BookingDateSelector';\nimport Request from '../helpers/request.js';\nimport BookingForm from '../components/Bookings/BookingForm';\n\nclass BookingContainer extends React.Component {\n constructor(props){\n   super(props);\n   this.state = {\n     currentDate: null,\n     data:[],\n     customerData:[],\n     tableData:[],\n     updatedTableData:[]\n   };\n   this.handleDateSelected = this.handleDateSelected.bind(this);\n   this.handleFormSubmit = this.handleFormSubmit.bind(this);\n   this.updateTableDataByCapacity = this.updateTableDataByCapacity.bind(this);\n };\n\nhandleDateSelected(selectedDate){\n this.setState({currentDate: selectedDate})\n};\n\ncomponentDidMount(){\n  let request2 = new Request()\n  request2.get('/api/bookings').then((bookingData) => {\n    this.setState({data:bookingData._embedded.bookings});\n  })\n  let request = new Request()\n  request.get('/api/customers').then((data1) => {\n    this.setState({customerData:data1._embedded.customers});\n  })\n  let request3 = new Request()\n  request3.get('/api/booths').then((data2) => {\n    this.setState({tableData:data2._embedded.booths});\n  })\n}\n\n\n\nhandleFormSubmit(booking){\n  debugger;\n  const request = new Request();\n request.post('/api/bookings', booking).then(()=>{\n   window.location = '/api/bookings'\n })\n\n}\n\ncheckTableAvailability(){\n\n\n}\n\nupdateTableDataByCapacity(partySize){\n  console.log(\"from updateTableData\");\n  // debugger;\n  let tables = this.state.tableData;\n  for (let i= tables.length-1; i>=0; i--){\n    console.log(\"current table\" + tables[i])\n    if(tables[i].capacity < partySize){\n      console.log(tables[i])\n      //remove table from tables array\n      tables.splice(i, 1);\n    }\n    console.log(\"tables after loop iteration\" + tables)\n  }\n  this.setState({updatedTableData: tables});\n}\n\nupdateTableDataByTime(bookingTime){\n  console.log(\"from updateTableData\");\n  // debugger;\n  let tables = this.state.tableData;\n  for (let i= tables.length-1; i>=0; i--){\n    console.log(\"current table\" + tables[i])\n    if(tables[i].capacity < partySize){\n      console.log(tables[i])\n      //remove table from tables array\n      tables.splice(i, 1);\n    }\n    console.log(\"tables after loop iteration\" + tables)\n  }\n  this.setState({updatedTableData: tables});\n}\n\n\n render(){\n   return(\n     <>\n     <BookingDateSelector bookings={this.state.data} onDateSelected={this.handleDateSelected}/>\n     <BookingList data={this.state.data} filterDate={this.state.currentDate}/>\n     <BookingForm onFormSubmit={this.handleFormSubmit} customerData = {this.state.customerData}\n     tableData={this.state.updatedTableData} onPartySizeInput={this.updateTableDataByCapacity}\n     onBookingTimeInput={this.updateTableDataByTime}/>\n     </>\n   );\n };\n};\n\nexport default BookingContainer;\n"]},"metadata":{},"sourceType":"module"}